/*
 * AUSF API
 *
 * OpenAPI specification for AUSF
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package mdaf

import (
	"net/http"

	"github.com/gin-gonic/gin"

	"loadbalance/logger"

	"github.com/free5gc/http_wrapper"
	"github.com/free5gc/openapi"
	"github.com/free5gc/openapi/models"
)

type amfData struct {
	amfNum  int
	ueNum   int
	cpuRate float64
}

// HTTPEapAuthMethod -
func HTTPNotifyAmf(ctx *gin.Context) {
	var amfData *amfData

	requestBody, err := ctx.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.HttpLog.Errorf("Get Request Body error: %+v", err)
		ctx.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&amfData, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.HttpLog.Errorln(problemDetail)
		ctx.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := http_wrapper.NewRequest(ctx.Request, amfData)
	HandleHTTPNotifyAmf(req)

}

func HandleHTTPNotifyAmf(request *http_wrapper.Request) int {
	// step 1: log
	logger.HttpLog.Infof("Handle AMF HTTP Notify")

	// step 2: retrieve request
	registerRequest := request.Body.(amfData)

	// step 3: handle the message
	toAmf := MDAFProcedure(registerRequest)
	return toAmf
}
